{
  "version": 3,
  "sources": ["../../../app/routes/sessions.$sessionId.feedback.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app\\\\\\\\routes\\\\\\\\sessions.$sessionId.feedback.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app\\\\routes\\\\sessions.$sessionId.feedback.tsx\");\n  import.meta.hot.lastModified = \"1751227277095.267\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from \"@remix-run/node\";\nimport { Form, useLoaderData } from \"@remix-run/react\";\nimport { getSession } from \"~/utils/session.server\"; // User session management\nimport { getCurrentUser, getUserRole } from \"~/utils/auth.server\";\nimport { connectDB } from \"~/utils/db.server\";\nimport { Session } from \"~/models/Session\";\nexport const loader = async ({\n  request,\n  params\n}) => {\n  const session = await getSession(request);\n  const email = session.get(\"email\");\n  if (!email) return redirect(\"/login\");\n  const user = await getCurrentUser(email);\n  const role = await getUserRole(email);\n  if (!user) return redirect(\"/login\");\n  if (role !== \"mentee\") {\n    return redirect(\"/dashboard\"); // Only mentees can submit feedback\n  }\n  if (!params.sessionId) {\n    throw new Response(\"Session ID is required\", {\n      status: 404\n    });\n  }\n  await connectDB();\n  const sessionData = await Session.findById(params.sessionId);\n  if (!sessionData || sessionData.mentee.toString() !== user.id) {\n    throw new Response(\"Session not found or unauthorized\", {\n      status: 404\n    });\n  }\n  return json({\n    sessionId: params.sessionId\n  });\n};\nexport const action = async ({\n  request,\n  params\n}) => {\n  const formData = await request.formData();\n  const rating = parseInt(formData.get(\"rating\"));\n  const comment = formData.get(\"comment\");\n  if (!rating || rating < 1 || rating > 5) {\n    return json({\n      error: \"Rating must be between 1 and 5\"\n    }, {\n      status: 400\n    });\n  }\n  const session = await getSession(request);\n  const email = session.get(\"email\");\n  const user = await getCurrentUser(email);\n  if (!user) return redirect(\"/login\");\n  if (!params.sessionId) {\n    throw new Response(\"Session ID is required\", {\n      status: 404\n    });\n  }\n  await connectDB();\n  const sessionData = await Session.findById(params.sessionId);\n  if (!sessionData || sessionData.mentee.toString() !== user.id) {\n    throw new Response(\"Session not found or unauthorized\", {\n      status: 404\n    });\n  }\n  await Session.findByIdAndUpdate(params.sessionId, {\n    feedback: {\n      rating,\n      comment\n    }\n  });\n  return redirect(\"/my-sessions\");\n};\nexport default function SessionFeedback() {\n  _s();\n  const {\n    sessionId\n  } = useLoaderData();\n  return <div className=\"container mx-auto px-4 py-8\">\r\n      <h1 className=\"text-2xl font-semibold mb-6 text-purple-800\">Submit Feedback</h1>\r\n      <div className=\"bg-white rounded-lg p-6 shadow\">\r\n        <Form method=\"post\" className=\"space-y-4\">\r\n          <div>\r\n            <label className=\"block text-gray-700\">Rating (1-5)</label>\r\n            <input type=\"number\" name=\"rating\" min=\"1\" max=\"5\" required className=\"w-full p-2 border rounded\" />\r\n          </div>\r\n          <div>\r\n            <label className=\"block text-gray-700\">Comment</label>\r\n            <textarea name=\"comment\" className=\"w-full p-2 border rounded\" rows={4}></textarea>\r\n          </div>\r\n          <button type=\"submit\" className=\"bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700\">\r\n            Submit Feedback\r\n          </button>\r\n        </Form>\r\n      </div>\r\n    </div>;\n}\n_s(SessionFeedback, \"NRQ6xFJ7C6n66SCpZG+1mQ9XJIc=\", false, function () {\n  return [useLoaderData];\n});\n_c = SessionFeedback;\nvar _c;\n$RefreshReg$(_c, \"SessionFeedback\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAA+B;AAE/B,qBAA2B;AAC3B,kBAA4C;AAC5C,gBAA0B;AA2EpB;AAnGN,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,wDAA0D,EAAE;AAAA,EACrG;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA+C;AAC/C,cAAY,IAAI,eAAe;AACjC;AA4Ee,SAAR,kBAAmC;AACxC,KAAG;AACH,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,cAAc;AAClB,SAAO,mDAAC,SAAI,WAAU,+BAClB;AAAA,uDAAC,QAAG,WAAU,+CAA8C,+BAA5D;AAAA;AAAA;AAAA;AAAA,WAA2E;AAAA,IAC3E,mDAAC,SAAI,WAAU,kCACb,6DAAC,QAAK,QAAO,QAAO,WAAU,aAC5B;AAAA,yDAAC,SACC;AAAA,2DAAC,WAAM,WAAU,uBAAsB,4BAAvC;AAAA;AAAA;AAAA;AAAA,eAAmD;AAAA,QACnD,mDAAC,WAAM,MAAK,UAAS,MAAK,UAAS,KAAI,KAAI,KAAI,KAAI,UAAQ,MAAC,WAAU,+BAAtE;AAAA;AAAA;AAAA;AAAA,eAAkG;AAAA,WAFpG;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MACA,mDAAC,SACC;AAAA,2DAAC,WAAM,WAAU,uBAAsB,uBAAvC;AAAA;AAAA;AAAA;AAAA,eAA8C;AAAA,QAC9C,mDAAC,cAAS,MAAK,WAAU,WAAU,6BAA4B,MAAM,KAArE;AAAA;AAAA;AAAA;AAAA,eAAwE;AAAA,WAF1E;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,MACA,mDAAC,YAAO,MAAK,UAAS,WAAU,kEAAiE,+BAAjG;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAXF;AAAA;AAAA;AAAA;AAAA,WAYA,KAbF;AAAA;AAAA;AAAA;AAAA,WAcA;AAAA,OAhBG;AAAA;AAAA;AAAA;AAAA,SAiBL;AACJ;AACA,GAAG,iBAAiB,gCAAgC,OAAO,WAAY;AACrE,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,iBAAiB;AAElC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
